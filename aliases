#/usr/bin/env sh
alias ec="macvim --servername vim"

o() {
  env open "$1" &> /dev/null &
}

untar() {
  tar -zxvf $1
}

alias c="cd"
alias h="history | tail -n 50"

alias gs='git status'
alias g="git"
alias rm='rmtrash'
alias R='source ~/.zshrc'

alias recent="ls -1t | head -30"
alias vim-profile="gvim --startuptime vim.log && cat vim.log | sort -k 2"
alias vim-update='vim -c "silent VAMUpdateActivated"'

alias disk-usage="sudo du -h / 2> /dev/null | grep -P '^[0-9\.]+G'"
alias disk-usage-here="sudo du -hsx * | sort -rh | head -10"
alias w="which"

alias loc="find . -type f | xargs wc -l | sort -k 1 -g"

# calc stuff
= () {
    echo "$(($@))"
}

# Use perl regexes for grepping
alias grep="grep -P"

# alias rn-reload="adb shell input keyevent 82 && sleep 0.3 && adb shell input keyevent 20 23"
# alias rn-debug="adb shell input keyevent 82 && sleep 0.3 && adb shell input keyevent 20 20 23"
# alias rn-menu="adb shell input keyevent 82"
# alias rn-stop="adb shell am force-stop com.veloyonative"
# alias rn-log="adb logcat *:S ReactNative:I ReactNativeJS:I"
# alias rn-start="watchman watch-del-all && watchman-setup && export NODE_ENV=native && react-native start --skipflow --verbose"
# alias rn-start-fresh="watchman watch-del-all && watchman-setup && export NODE_ENV=native && react-native start --skipflow --verbose --reset-cache"
# alias npm="pnpm"

alias tail='tail -q'

# Remove zsh weirdness when dealing with curl
alias curl="noglob curl"

preview () {
    if [ -z "$*" ]; then
        echo "Usage: preview [FILE]"
    else
        open -f -a /Applications/Preview.app
    fi
}

# interactive killing of apps
alias fkill='fkill'

alias kill-dangling-chromes='ps aux | grep "Google\ Chrome.+\-\-disable-notifications" | grep -v grep | awk "{print $2}" | xargs -n1 kill'

# alias m-kube-top-all-pods='kubectl --context cluster-a.mesaic.io top pods --all-namespaces | grep -vP "(kube-|default-http|nginx-ingress)" | sort'
# alias m-kube-nodes-resource-usage='kubectl --context cluster-a.mesaic.io top node'
# alias m-kube-pods'kubectl --context cluster-a.mesaic.io get pods -o wide --all-namespaces | grep -vP "(kube-|default-http|nginx-ingress)"'
# alias m-kube-pods-for-node='kubectl --context cluster-a.mesaic.io get pods -o wide --all-namespaces | grep'
# alias m-kube-nodes-cpu-utilisation='kubectl --context cluster-a.mesaic.io get nodes | grep node | awk '\''{print $1}'\'' | xargs -I {} sh -c '\''echo   {} ; kubectl --context cluster-a.mesaic.io describe node {} | grep Allocated -A 5 | grep -ve Event -ve Allocated -ve percent -ve -- ; echo '\'''
# function m-kube-avg-memory-for-project() {
#   project=$1
#   kubectl --context cluster-a.mesaic.io top pods --all-namespaces | grep -vP "(kube-|default-http|nginx-ingress)" | sort | grep $project | awk '{ print $4 }' | sed 's/Mi//' | jq -s 'add/length'
# }
# function m-kube-avg-cpu-for-project() {
#   project=$1
#   kubectl --context cluster-a.mesaic.io top pods --all-namespaces | grep -vP "(kube-|default-http|nginx-ingress)" | sort | grep $project | awk '{ print $3 }' | sed 's/m//' | jq -s 'add/length'
# }
#
# function m-kube-cluster-ram() {
#   AVG_RAM=$(m-kube-nodes-resource-usage | awk '{ print $4 }' | tail -n +2 | sed 's/\Mi//' | jq -s 'add/length')
#   echo ${AVG_RAM}MB avg
# }
#
# function m-kube-cluster-cpu() {
#   AVG_CPU=$(m-kube-nodes-resource-usage | awk '{ print $3 }' | tail -n +2 | sed 's/\%//' | jq -s 'add/length')
#   echo ${AVG_CPU}% avg
# }
#
# m-load-last-run() {
#   cd ~/mesaic/mesaic/load-testing/results
#   cat $(ls -ht | grep -v _vis | head -n1) | jq '.results[] | {apiCount: .input.apiCount, c: .input.c, requests: .input.requests, cAPI: .input.concurrentUserSessionsPerApi}'
# }

function getcpid() {
    cpids=`pgrep -P $1|xargs`
		echo "[$1 (main)] $(ps -o rss -p $1 | tail -n1)"

    for cpid in $cpids;
    do
        echo "[$cpid] $(ps -o rss -p $cpid | tail -n1)"
        # getcpid $cpid
    done
		echo '-------------'

}
alias remove-color="sed -i -r 's/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g"
git-clean() {
	git remote prune origin && git branch --merged master | grep -v 'master' | xargs git branch -d
}
pip3='python3 -m pip'
# alias serve='python -m SimpleHTTPServer'
function emulator { cd /Users/jwerner/Library/Android/Sdk/tools && ./emulator "$@" &; }
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'

e() {
	if [[ "$1" == "" || -d "$1" ]]; then
			files=$(ag -l '' $1 | fzf -m --bind 'shift-tab:select-all+accept' | xargs echo)
	else
			files="$@"
	fi
	macvim --servername vim --remote-silent "$@"
}

alias date1='date +"%Y%m%d%H%M%S"'

f() {
	rg --files --glob "" | fzf
}
alias ag='ag --path-to-ignore ~/.ignore'
alias m="node ~/mesaic/mesaic/packages/mesaic-cli"
alias mesaic="node packages/mesaic-cli"
alias m-docker-prune='docker system prune -a'
dr() {
		docker stop mesaic_$1_1
		docker start mesaic_$1_1
}

sketches() {
	(cd ~/scans && pdfimages -j * scan && rmtrash *.pdf && open ~/scans)
}
alias inode="node -e 'const lodash = require(\"lodash\"); for (const k in lodash) { global[\"_\" + k] = lodash[k]; }' -i"

alias nl="cd ~/Google\ Drive/Notes && cat *.* | grep -o -P '\#\w\w[\w\/]+' | tr '[:upper:]' '[:lower:]' | sort | uniq -c | grep -v 'binary file' | grep -v '\#inbox'"

n() {
	cd ~/Google\ Drive/Notes && e "`ag $1 -l | fzf`"
}
